#!/usr/bin/env python3
# =================================================================
# generator -- OpenCL kernel Scan generator
#
# This is the main program for the kernel vectorization compiler,
# which just parses command-line options, figures out which source
# files to read and write to, and invokes the different stages
# of the compiler properly.
#
# Copyright (C) 2017, Marcio Machado Pereira
# License: BSD
# =================================================================

import os
import sys

SOURCE = """
__kernel void scan (__global _dataType_ *input,
                    __global _dataType_ *S,
                    const unsigned int n) {
	int tid = get_local_id(0);
	int gid = get_global_id(0);
	int bid = get_group_id(0);
    int offset = 1;
 	/*Cache the computational window in shared memory*/
 	__local _dataType_ block [1024];
 	block[tid] = input[gid];
 	/*
 	block[2 * tid] = input[2 * tid];
	block[2 * tid + 1] = input[2 * tid + 1];
 	*/
 	/* build the sum in place up the tree */
	for (int d = n >> 1; d > 0; d >>= 1) {
		barrier (CLK_LOCAL_MEM_FENCE);
		if (tid < d) {
			int ai = offset * (2 * tid + 1) - 1;
			int bi = offset * (2 * tid + 2) - 1;

			block[bi] = block[bi] _operation_ block[ai];
		}
		offset *= 2;
	}

	/* scan back down the tree */

	/* clear the last element */
	barrier (CLK_LOCAL_MEM_FENCE);
	S[bid] = block[n - 1];
	barrier(CLK_LOCAL_MEM_FENCE | CLK_GLOBAL_MEM_FENCE);

	if (tid == 0) {
		block[n - 1] = 0;
	}

	/* traverse down the tree building the scan in the place */
	for (int d = 1; d < n ; d *= 2) {
		offset >>= 1;
		barrier (CLK_LOCAL_MEM_FENCE);
		if (tid < d)
		{
			int ai = offset * (2 * tid + 1) - 1;
			int bi = offset * (2 * tid + 2) - 1;

			int t = block[ai];
			block[ai] = block[bi];
			block[bi] = block[bi] _operation_ t;
		}
	}

	barrier (CLK_LOCAL_MEM_FENCE);
	input[gid] = block[tid];
	/*
	input[2 * tid] = block[2 * tid];
	input[2 * tid + 1] = block[2 * tid + 1];
	*/
}

__kernel void fix(__global _dataType_ *input,
                  __global _dataType_ *S){
	int bid = get_group_id(0);
	int gid = get_global_id(0);
	input[gid] = input[gid] _operation_ S[bid];
}

"""


def run_scan_generator():
    """ Runs the command-line of kernel scan generator. """
    if len(sys.argv) != 2:
        print("<<scan generator>> Input Error")

    filename = sys.argv[1]
    with open(filename, 'a') as file:
        file.write(SOURCE)
        file.close()

    os.rename(filename, filename + ".cl")


if __name__ == '__main__':
    run_scan_generator()
